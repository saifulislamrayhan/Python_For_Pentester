import os
import subprocess
import win32evtlog
import win32service
import win32con
import win32api
import win32security
import logging
import socket
import time

# Set up logging
logging.basicConfig(filename='system_monitor.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def monitor_event_logs():
    """Monitor Windows Event Logs for security-related events."""
    try:
        hand = win32evtlog.OpenEventLog(None, "Security")
        flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
        events = win32evtlog.ReadEventLog(hand, flags, 0)
        for event in events:
            if event.EventID == 4624:  # Logon event
                logging.info(f"Security Event: Successful logon by {event.StringInserts[5]}")
            elif event.EventID == 4625:  # Failed logon event
                logging.warning(f"Security Event: Failed logon attempt by {event.StringInserts[5]}")
    except Exception as e:
        logging.error(f"Error monitoring event logs: {e}")

def check_open_ports():
    """Check for open ports that could be potential security risks."""
    try:
        common_ports = [21, 22, 23, 25, 80, 443, 3389]
        for port in common_ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', port))
            if result == 0:
                logging.warning(f"Port {port} is open and could be a security risk.")
            sock.close()
    except Exception as e:
        logging.error(f"Error checking open ports: {e}")

def enforce_password_policy():
    """Enforce password policies."""
    try:
        # Example: Check minimum password length
        min_pass_length = 8
        result = subprocess.run(["net", "accounts"], capture_output=True, text=True)
        if f"Minimum password length: {min_pass_length}" not in result.stdout:
            logging.warning("Password policy does not meet the minimum length requirement.")
            subprocess.run(["net", "accounts", "/minpwlen:8"])
            logging.info("Updated password policy to enforce minimum length.")
    except Exception as e:
        logging.error(f"Error enforcing password policy: {e}")

def disable_unnecessary_services():
    """Disable unnecessary services."""
    try:
        services_to_disable = ["Telnet", "SSDPSRV", "upnphost"]
        for service in services_to_disable:
            subprocess.run(["sc", "config", service, "start=", "disabled"], check=True)
            logging.info(f"Disabled service: {service}")
    except Exception as e:
        logging.error(f"Error disabling services: {e}")

def check_windows_updates():
    """Check for and install Windows updates."""
    try:
        result = subprocess.run(["powershell", "Get-WindowsUpdate"], capture_output=True, text=True)
        if "No updates available" not in result.stdout:
            logging.info("Windows updates are available. Installing updates...")
            subprocess.run(["powershell", "Install-WindowsUpdate", "-AcceptAll", "-AutoReboot"])
        else:
            logging.info("Windows is up to date.")
    except Exception as e:
        logging.error(f"Error checking for Windows updates: {e}")

def main():
    """Main function to run all monitoring and hardening tasks."""
    logging.info("Starting system monitoring and hardening...")
    while True:
        monitor_event_logs()
        check_open_ports()
        enforce_password_policy()
        disable_unnecessary_services()
        check_windows_updates()
        time.sleep(3600)  # Run checks every hour

if __name__ == "__main__":
    main()