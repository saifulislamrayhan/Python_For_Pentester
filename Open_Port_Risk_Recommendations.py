import nmap
import sys

def scan_ports(target_ip, port_range):
    

    """
    Parameters Should be this format
    :param target_ip: IP address to scan (like, '192.168.1.1')
    :param port_range: Port range to scan (like, '1-1000')
    :return: Dictionary of open ports and associated services.
    """
    try:
        # Initialize the Nmap PortScanner
        nm = nmap.PortScanner()
        print(f"Scanning target {target_ip} on ports {port_range}...")

        # Perform the scan
        nm.scan(target_ip, port_range)

        # Check if the scan was successful
        if not nm.all_hosts():
            print("No hosts found or scan failed.")
            return {}

        # Extract open ports and services
        open_ports = {}
        for host in nm.all_hosts():
            print(f"Scan results for host: {host}")
            for proto in nm[host].all_protocols():
                print(f"Protocol: {proto}")
                ports = nm[host][proto].keys()
                for port in ports:
                    state = nm[host][proto][port]['state']
                    if state == 'open':
                        service = nm[host][proto][port]['name']
                        open_ports[port] = service
                        print(f"Port {port} is {state} (Service: {service})")

        return open_ports

    except nmap.PortScannerError as e:
        print(f"Nmap scan error: {e}")
        return {}
    except Exception as e:
        print(f"An error occurred: {e}")
        return {}

def assess_risks(open_ports):
    """
    Assess risks based on open ports and known vulnerabilities.
    :param open_ports: Dictionary of open ports and their services.
    :return: Dictionary of risks and recommendations.
    """
    risks = {}
    common_vulnerable_ports = {

        22: "SSH - Use key-based authentication, disable root login, and change the default port.", # type: ignore
        23: "Telnet - Disable Telnet and use SSH instead, as Telnet transmits data in plaintext.",
        25: "SMTP - Configure SPF, DKIM, and DMARC to prevent email spoofing.",
        53: "DNS - Use DNSSEC to prevent DNS spoofing and cache poisoning.",
        80: "HTTP - Ensure the server is updated, disable unnecessary features, and use HTTPS.",
        110: "POP3 - Use POP3S (encrypted version) and enforce strong passwords.",
        135: "MS RPC - Restrict access to trusted IPs and disable if not needed.",
        139: "NetBIOS - Disable NetBIOS if not required and block access from untrusted networks.",
        143: "IMAP - Use IMAPS (encrypted version) and enforce strong passwords.",
        161: "SNMP - Use SNMPv3 with encryption and restrict access to trusted IPs.",
        389: "LDAP - Use LDAPS (encrypted version) and enforce strong authentication.",
        443: "HTTPS - Ensure valid SSL/TLS certificates and disable weak protocols (e.g., SSLv2, SSLv3).",
        445: "SMB - Disable SMBv1, use SMBv3 with encryption, and restrict access to trusted IPs.",
        465: "SMTP over SSL - Ensure proper configuration and use strong encryption.",
        587: "SMTP (Submission) - Use TLS encryption and enforce authentication.",
        636: "LDAPS - Ensure valid certificates and enforce strong authentication.",
        993: "IMAPS - Use strong encryption and enforce strong passwords.",
        995: "POP3S - Use strong encryption and enforce strong passwords.",
        1433: "MS SQL Server - Use strong passwords, enable encryption, and restrict access to trusted IPs.",
        1521: "Oracle DB - Use strong passwords, enable encryption, and restrict access to trusted IPs.",
        2049: "NFS - Restrict access to trusted IPs and use strong authentication.",
        3306: "MySQL - Use strong passwords, enable encryption, and restrict access to trusted IPs.",
        3389: "RDP - Use Network Level Authentication (NLA) and restrict access to trusted IPs.",
        5900: "VNC - Use strong passwords and restrict access to trusted IPs.",
        5985: "WinRM HTTP - Use HTTPS (WinRM over SSL) and restrict access to trusted IPs.",
        5986: "WinRM HTTPS - Ensure valid certificates and restrict access to trusted IPs.",
        8080: "HTTP Alternate - Ensure the server is updated, disable unnecessary features, and use HTTPS.",
        8443: "HTTPS Alternate - Ensure valid SSL/TLS certificates and disable weak protocols.",
        9000: "Portainer (Docker) - Use strong passwords and restrict access to trusted IPs.",


    }

    for port, service in open_ports.items():
        if port in common_vulnerable_ports:
            risks[port] = {
                'service': service,
                'risk': "High",
                'recommendation': common_vulnerable_ports[port]
            }
        else:
            risks[port] = {
                'service': service,
                'risk': "Medium",
                'recommendation': "Ensure the service is updated and properly configured."
            }

    return risks

def main():
    # Input target IP and port range
    target_ip = input("Enter the target IP address: ")
    port_range = input("Enter the port range to scan (e.g., 1-1000): ")

    # Scan for open ports
    open_ports = scan_ports(target_ip, port_range)

    if open_ports:
        # Assess risks for open ports
        risks = assess_risks(open_ports)
        print("\nRisk Assessment:")
        for port, details in risks.items():
            print(f"Port {port} ({details['service']}):")
            print(f"  Risk Level: {details['risk']}")
            print(f"  Recommendation: {details['recommendation']}\n")
    else:
        print("No open ports found or scan failed.")

if __name__ == "__main__":
    main()