import os
import subprocess
import logging
import socket
import time

# Set up logging
logging.basicConfig(filename='system_monitor.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def monitor_system_logs():
    """Monitor system logs for security-related events."""
    try:
        log_files = ['/var/log/auth.log', '/var/log/syslog']
        for log_file in log_files:
            if os.path.exists(log_file):
                with open(log_file, 'r') as f:
                    for line in f:
                        if 'Failed password' in line:
                            logging.warning(f"Security Event: Failed login attempt - {line.strip()}")
                        elif 'Accepted password' in line:
                            logging.info(f"Security Event: Successful login - {line.strip()}")
    except Exception as e:
        logging.error(f"Error monitoring system logs: {e}")

def check_open_ports():
    """Check for open ports that could be potential security risks."""
    try:
        common_ports = [21, 22, 23, 25, 80, 443, 3389]
        for port in common_ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', port))
            if result == 0:
                logging.warning(f"Port {port} is open and could be a security risk.")
            sock.close()
    except Exception as e:
        logging.error(f"Error checking open ports: {e}")

def enforce_password_policy():
    """Enforce password policies."""
    try:
        # Example: Check minimum password length
        min_pass_length = 8
        result = subprocess.run(["grep", "^PASS_MIN_LEN", "/etc/login.defs"], capture_output=True, text=True)
        if f"PASS_MIN_LEN\t{min_pass_length}" not in result.stdout:
            logging.warning("Password policy does not meet the minimum length requirement.")
            subprocess.run(["sed", "-i", f"s/^PASS_MIN_LEN.*/PASS_MIN_LEN\t{min_pass_length}/", "/etc/login.defs"])
            logging.info("Updated password policy to enforce minimum length.")
    except Exception as e:
        logging.error(f"Error enforcing password policy: {e}")

def disable_unnecessary_services():
    """Disable unnecessary services."""
    try:
        services_to_disable = ["telnet", "rpcbind", "nfs-kernel-server"]
        for service in services_to_disable:
            subprocess.run(["systemctl", "disable", service], check=True)
            subprocess.run(["systemctl", "stop", service], check=True)
            logging.info(f"Disabled service: {service}")
    except Exception as e:
        logging.error(f"Error disabling services: {e}")

def check_system_updates():
    """Check for and install system updates."""
    try:
        result = subprocess.run(["apt-get", "update"], capture_output=True, text=True)
        result = subprocess.run(["apt-get", "upgrade", "-y"], capture_output=True, text=True)
        if "0 upgraded, 0 newly installed" not in result.stdout:
            logging.info("System updates are available. Installing updates...")
            subprocess.run(["apt-get", "dist-upgrade", "-y"], check=True)
        else:
            logging.info("System is up to date.")
    except Exception as e:
        logging.error(f"Error checking for system updates: {e}")

def main():
    """Main function to run all monitoring and hardening tasks."""
    logging.info("Starting system monitoring and hardening...")
    while True:
        monitor_system_logs()
        check_open_ports()
        enforce_password_policy()
        disable_unnecessary_services()
        check_system_updates()
        time.sleep(3600)  # Run checks every hour

if __name__ == "__main__":
    main()